# This is a sample Python script.

# Press Shift+F10 to execute it or replace it with your code.
# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
import schedule
import re
import time
import datetime
from threading import Thread
from time import sleep
import telebot
from telebot import types
def schedule_checker():
    while True:
        schedule.run_pending()
        sleep(1)
def function_to_run():
    try:
        connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7', host='158.160.137.15')
        curs = connection.cursor()
        curs.execute(" SELECT u.name, st.chat_id FROM public.send_time st JOIN public.users u ON u.chat_id = st.chat_id where extract(day from u.date_of_bd) = extract(day from current_timestamp) and extract(month from u.date_of_bd) = extract(month from current_timestamp) and extract(hour from to_timestamp(st.time,'HH24:MI')) = extract(hour from current_timestamp) and extract(minute from to_timestamp(st.time,'HH24:MI')) = extract(minute from current_timestamp) ")
        users1 = curs.fetchall()
        for user in users1:
            bot.send_message(user[1], '–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç—å —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ —Å –¥—Ä:' + user[0])
        curs.close()
        connection.close()
    except Exception:
        bot.send_message(user[1], '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–∑—É. ')

bot = telebot.TeleBot('6827864691:AAH2MPjAwSdaQctyiic5Z2Nbo30AQ8rxMl8')
date_of_bd = None
chat_id_tg = None
name = None
phone = None
email = None
information = None
message_chat_id = None
list_for_update = []
list_of_inserts = [] #—Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Å—Ç–∞–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. 1 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å = 1 –∑–∞–ø–∏—Å—å
import psycopg2
try:
    connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7', host='158.160.137.15')
    cur = connection.cursor()
    cur.execute('CREATE TABLE IF NOT EXISTS public.users(name varchar(100), date_of_bd date, chat_id varchar(100), phone varchar(100), email varchar(100), information varchar(200))')
    cur.execute('CREATE TABLE IF NOT EXISTS public.send_time(name varchar (100), time varchar(50), chat_id varchar(100))')
    connection.commit()
    cur.close()
    connection.close()
except Exception:
    print('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ')
@bot.message_handler(commands=['start','hello'])
def start(message):
    #TODO: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞, –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è –∏ —Ç–¥)
    try:
        connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7', host='158.160.137.15')
        cur = connection.cursor()
        cur.execute("SELECT chat_id FROM public.send_time")
        send_time_chat_ids = cur.fetchall()
        chat_id_array = []
        for chat_ids in send_time_chat_ids:
            chat_id_array.append(chat_ids[0])
        if str(message.chat.id) not in chat_id_array:
            cur.execute(
                "INSERT INTO public.send_time(time, chat_id) VALUES ('%s', '%s')" % ('9:00', message.chat.id))
        connection.commit()
        cur.close()
        connection.close()
        to_pin = bot.send_message(message.chat.id,'–ü—Ä–∏–≤–µ—Ç! \n'
            '–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–æ–º–Ω–∏—Ç —Ç–µ–±–µ –æ –¥–Ω—è—Ö —Ä–æ–∂–¥–µ–Ω–∏—è—Ö —Ç–≤–æ–∏—Ö –±–ª–∏–∑–∫–∏—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∏—Ö ü•∞ \n'
            
            '\n –ü–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –±–æ—Ç–æ–º –∫—Ä–∞–π–Ω–µ –ø—Ä–æ—Å—Ç–æ: –≤—ã –≤–Ω–æ—Å–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, –∏–º—è, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (–ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏) –∏ –Ω–µ–±–æ–ª—å—à–æ–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. \n'
            '\n –í –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –Ω–∞—à –±–æ—Ç –ø—Ä–∏—à–ª—ë—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –Ω–µ–±–æ–ª—å—à–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π :) \n'
            
            '\n –í –∫–∞—á–µ—Å—Ç–≤–µ —É–¥–æ–±—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —ç—Ç–æ –≤—Ä–µ–º—è 9:00 —É—Ç—Ä–∞. –û–¥–Ω–∞–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ –ø–æ–º–µ–Ω—è—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É "–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏". \n'
            
            '\n –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å –æ—Ç–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É –∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞, –≤—ã –º–æ–∂–µ—Ç–µ' "<a href='https://www.tinkoff.ru/cf/7L9dLH3LWHr'> –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ </a>" '–Ω–∞–º –ª—é–±—É—é –∫–æ–º—Ñ–æ—Ä—Ç–Ω—É—é —Å—É–º–º—É \n'
            '\n –°–æ–∑–¥–∞—Ç–µ–ª–∏: \n'
            '@poluvna \n'
            '@Dmitry_Zherebtsov', parse_mode = "HTML").message_id
        bot.pin_chat_message(chat_id=message.chat.id, message_id=to_pin)
        action(message)
    except Exception:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–±–ª–µ–º—ã –Ω–∞ –Ω–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ.')
        action(message)


@bot.message_handler(commands=['action'])
def action(message: types.Message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–í–Ω–µ—Å–∏—Ç–µ –î–†", callback_data='add bd')
    btn2 = types.InlineKeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –î–†", callback_data='show bd')
    btn3 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data='change_info')
    btntime = types.InlineKeyboardButton("–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏", callback_data='choose_time')
    markup.add(btn1).add(btn2).add(btn3).add(btntime)
    global user_id_tg
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'choose_time':
        bot.send_message(callback.message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ hh:mm')

        @bot.message_handler(content_types=['text'])
        def change_time(message):
            #TODO: –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (:)
            try:
                time.strptime(message.text.strip(), '%H:%M')
                connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                              host='158.160.137.15')
                cur = connection.cursor()
                cur.execute("UPDATE public.send_time SET time = '%s'  WHERE chat_id ='%s' " % (
                message.text.strip(), message.chat.id))
                connection.commit()
                cur.close()
                connection.close()
                bot.send_message(message.chat.id, '–í—Ä–µ–º—è –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
                action(message)
            except ValueError:
                bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ.')
                action(message)
    if callback.data == 'change_info':
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                          host='158.160.137.15')
            cur = connection.cursor()
            cur.execute("SELECT name, id FROM public.users where chat_id ='%s' " % (callback.message.chat.id))
            list_for_update = cur.fetchall()
            if list_for_update is not None:
                markup_change = types.InlineKeyboardMarkup()
                for list in list_for_update:
                    btn_change = types.InlineKeyboardButton(list[0], callback_data = "N_" + str(list[1]))
                    markup_change.add(btn_change)
                bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=markup_change)
            else:
                bot.send_message(callback.message.chat.id, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
                action(callback.message)
            cur.close()
            connection.close()
    #TODO: –ø–æ–¥—É–º–∞—Ç—å –∫–∞–∫ –≤—ã–≤–æ–¥–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–∂–∏–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π. –Ω–∞–≤–µ—Ä–Ω–æ–µ, –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–∫–Ω–æ–ø–∫–∞)

    if "N_" in callback.data:
        connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                      host='158.160.137.15')
        cur = connection.cursor()
        cur.execute("SELECT name, to_char(date_of_bd,'dd.mm.yyyy'), phone, email, information,id FROM public.users where id = '%s' " % (callback.data[2:]))
        list_of_attributes = cur.fetchall()
        if list_of_attributes is not None:
            markup3 = types.InlineKeyboardMarkup()
            for list in list_of_attributes:
                btn_change2 = types.InlineKeyboardButton('–ò–º—è: ' + list[0], callback_data="NP_" + 'name' + str(list[5]))
                btn_change3 = types.InlineKeyboardButton('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ' + list[1], callback_data="NP_" + 'date_of_bd' + str(list[5]))
                btn_change4 = types.InlineKeyboardButton('–¢–µ–ª–µ—Ñ–æ–Ω: ' + list[2], callback_data="NP_" + 'phone' + str(list[5]))
                btn_change5 = types.InlineKeyboardButton('–ü–æ—á—Ç–∞: ' + list[3], callback_data="NP_" + 'email' + str(list[5]))
                btn_change6 = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ' + list[4], callback_data="NP_" + 'information' + str(list[5]))
                btn_main = types.InlineKeyboardButton('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é <<<', callback_data = "menu")
                markup3.add(btn_change2).add(btn_change3).add(btn_change4).add(btn_change5).add(btn_change6).add(btn_main)
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:', reply_markup=markup3)
        else:
            bot.send_message(callback.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
            action(callback.message)
        cur.close()
        connection.close()
    if callback.data == "menu":
        action(callback.message)
    if "NP_" in callback.data and "name" in callback.data:
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        @bot.message_handler(content_types=['text'])
        def change_name(message):
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                          host='158.160.137.15')
            cur = connection.cursor()
            cur.execute(
                "UPDATE public.users SET name = '%s' where id = '%s' " % (message.text.strip(), callback.data[7:]))
            bot.send_message(callback.message.chat.id, '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
            connection.commit()
            cur.close()
            connection.close()
            markup_main2 = types.InlineKeyboardMarkup()
            btn_main = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main')
            btn_change_other = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–ø–∏—Å—è–º –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data='back')
            markup_main2.add(btn_main).add(btn_change_other)
            bot.send_message(callback.message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup_main2)
            if callback.data == "main":
                action(message)
            #TODO: –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
    if "NP_" in callback.data and "date_of_bd" in callback.data:
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')
        @bot.message_handler(content_types=['text'])
        def change_date_of_bd(message):
            pattern = re.compile(r'^([0-9]{2}\.[0-9]{2}\.[0-9]{4})$')

            if pattern.match(message.text.strip()):
                try:
                    dateparts = callback.message.text.strip().split('.')
                    dateobj = datetime.date(int(dateparts[2]), int(dateparts[1]), int(dateparts[0]))
                    connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                                  host='158.160.137.15')
                    cur = connection.cursor()
                    cur.execute(
                        "UPDATE public.users SET to_char(date_of_bd,'dd.mm.yyyy') = '%s' where id = '%s' " % (
                        message.text.strip(), callback.data[13:]))
                    bot.send_message(callback.message.chat.id, '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
                    connection.commit()
                    cur.close()
                    connection.close()
                    action(message)
                except Exception:
                    bot.send_message(callback.message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
                    action(message)

    if "NP_" in callback.data and "phone" in callback.data:
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        @bot.message_handler(content_types=['text'])
        def change_phone(message):
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                          host='158.160.137.15')
            cur = connection.cursor()
            cur.execute(
                "UPDATE public.users SET phone = '%s' where id = '%s' " % (message.text.strip(), callback.data[8:]))
            bot.send_message(callback.message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
            connection.commit()
            cur.close()
            connection.close()
            action(callback.message)
    if "NP_" in callback.data and "email" in callback.data:
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        @bot.message_handler(content_types=['text'])
        def change_email(message):
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                          host='158.160.137.15')
            cur = connection.cursor()
            cur.execute(
                "UPDATE public.users SET email = '%s' where id = '%s' " % (message.text.strip(), callback.data[8:]))
            bot.send_message(callback.message.chat.id, '–ü–æ—á—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            connection.commit()
            cur.close()
            connection.close()
            action(callback.message)
    if "NP_" in callback.data and "information" in callback.data:
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')

        @bot.message_handler(content_types=['text'])
        def change_information(message):
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                          host='158.160.137.15')
            cur = connection.cursor()
            cur.execute(
                "UPDATE public.users SET information = '%s' where id = '%s' " % (message.text.strip(), callback.data[14:]))
            bot.send_message(callback.message.chat.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—É –∏–∑–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
            connection.commit()
            cur.close()
            connection.close()
            action(callback.message)
    if callback.data == 'add bd':
        global list_of_inserts
        for len_list in range(len(list_of_inserts)):
            if list_of_inserts[len_list][0] == callback.message.chat.id:
                list_of_inserts.pop(len_list)
        list_of_inserts.append([callback.message.chat.id, '', '', '', '', ''])
        #–∞—Ç—Ä–∏–±—É—Ç—ã: chat.id, date_of_bd, name, phone, email, information
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        bot.send_message(callback.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥', reply_markup=markup1)
        @bot.message_handler(content_types=['text'])
        def handle_bd(message):
                #print(0)
                pattern = re.compile(r'^([0-9]{2}\.[0-9]{2}\.[0-9]{4})$')
                #print(1)
                if pattern.match(message.text.strip()):
                    #print(2)
                    for len_list in range (len(list_of_inserts)):
                        if list_of_inserts[len_list][0] == message.chat.id:
                            list_of_inserts[len_list][1] = message.text.strip()
                    try:
                        dateparts = message.text.strip().split('.')
                        dateobj = datetime.date(int(dateparts[2]),int(dateparts[1]),int(dateparts[0]))
                        msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é', reply_markup=markup1)
                        bot.register_next_step_handler(msg, process_name)
                    except Exception:
                        bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
                        action(message)
                else:
                    #print(3)
                    bot.send_message(message.chat.id, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞')
                    action(message)
        def process_name(message):
            for len_list in range(len(list_of_inserts)):
                if list_of_inserts[len_list][0] == message.chat.id:
                    list_of_inserts[len_list][2] = message.text.strip()
            btn_skip2 = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞')
            markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup2.add(btn_skip2)
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=markup2)
            bot.register_next_step_handler(msg, process_phone)
        def process_phone(message):
            if (message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'):
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][3] = ''
                        #process_email(message)
            else:
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][3] = message.text.strip()
            btn_skip3 = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –ø–æ—á—Ç—ã')
            markup7 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            markup7.add(btn_skip3)
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É', reply_markup=markup7)
            bot.register_next_step_handler(msg, process_email)
        def process_email(message):
            if (message.text ==  '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –ø–æ—á—Ç—ã'):
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][4] = ''
                        #process_information(message)
            else:
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][4] = message.text.strip()
            markup4 = types.ReplyKeyboardMarkup(resize_keyboard=True)
            btn_skip4 = types.KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')
            markup4.add(btn_skip4)
            msg = bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–µ–ª–æ–≤–µ–∫–µ', reply_markup=markup4)
            bot.register_next_step_handler(msg, process_information)

        def process_information(message):
            if (message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'):
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][5] = ''
            else:
                for len_list in range(len(list_of_inserts)):
                    if list_of_inserts[len_list][0] == message.chat.id:
                        list_of_inserts[len_list][5] = message.text.strip()
            add_record_into_db(message)

        def add_record_into_db(message):
            try:
                connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7',
                                              host='158.160.137.15')
                print(datetime.datetime.now(), message.chat.id, 'connect')
                cur = connection.cursor()
                print(datetime.datetime.now(), message.chat.id, 'cursor')
                for len_list in range(len(list_of_inserts)):
                    print(datetime.datetime.now(), message.chat.id, 'for', list_of_inserts)
                    if list_of_inserts[len_list][0] == message.chat.id:
                        print(datetime.datetime.now(), message.chat.id, 'if')
                        cur.execute(
                            "INSERT INTO public.users(name, date_of_bd, chat_id, phone, email, information) VALUES ('%s', to_date('%s','dd.mm.yyyy'), '%s', '%s', '%s', '%s')" % (
                        list_of_inserts[len_list][2], list_of_inserts[len_list][1], list_of_inserts[len_list][0], list_of_inserts[len_list][3], list_of_inserts[len_list][4], list_of_inserts[len_list][5]))
                        bot.reply_to(message, '–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ' + list_of_inserts[len_list][2], reply_markup=types.ReplyKeyboardRemove())
                        print(datetime.datetime.now(), message.chat.id, 'insert')
                        list_of_inserts.pop(len_list)
                        print(datetime.datetime.now(), message.chat.id, 'pop')
                print(datetime.datetime.now(), message.chat.id, '–¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')

                connection.commit()
                print(datetime.datetime.now(), message.chat.id, 'commit')
                cur.close()
                print(datetime.datetime.now(), message.chat.id, 'cur.close')
                connection.close()
                print(datetime.datetime.now(), message.chat.id, 'conn.close')
                action(message)
            except Exception:
                bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å –≤–≤–æ–¥–∏–º—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.')
                action(message)



    if callback.data == 'show bd':
        try:
            connection = psycopg2.connect(dbname='polluvna', user='polluvna', password='KyFPza0pFLM7', host='158.160.137.15')
            cur = connection.cursor()
            cur.execute("SELECT name, to_char(date_of_bd,'dd.mm.yyyy') FROM public.users where chat_id ='%s' order by name " % (callback.message.chat.id))
            users = cur.fetchall()
            s = ''
            if len(users) != 0:
                for user in users:
                    for name in user:
                        s = s + ' ' + name + '\n'
                bot.send_message(callback.message.chat.id, s)
            else:
                bot.send_message(callback.message.chat.id, '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç!')
            cur.close()
            connection.close()
            action(callback.message)
        except Exception:
            bot.send_message(callback.message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ :(')
            action(callback.message)

if __name__ == "__main__":
    schedule.every().minute.do(function_to_run)
    Thread(target=schedule_checker).start()

bot.infinity_polling()

